name: Backend CI - Java Compilation and Testing

# Trigger the workflow on push and pull request events
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/backend-ci.yml'

# Define environment variables
env:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      # MySQL service for testing
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: cms_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      # MongoDB service for testing
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: adminpassword
        ports:
          - 27017:27017
        options: >-
          --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Step 4: Validate Maven project
    - name: Validate Maven project
      run: mvn validate

    # Step 5: Compile the project
    - name: Compile Java code
      run: mvn clean compile

    # Step 6: Run tests
    - name: Run unit tests
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cms_test
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_DATA_MONGODB_URI: mongodb://admin:adminpassword@localhost:27017/cms_test?authSource=admin

    # Step 7: Run integration tests
    - name: Run integration tests
      run: mvn verify -DskipUnitTests=true
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cms_test
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_DATA_MONGODB_URI: mongodb://admin:adminpassword@localhost:27017/cms_test?authSource=admin

    # Step 8: Generate test reports
    - name: Generate test report
      if: always()
      run: mvn surefire-report:report

    # Step 9: Code style check with Checkstyle
    - name: Run Checkstyle
      run: mvn checkstyle:check
      continue-on-error: true

    # Step 10: Security vulnerability check
    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true

    # Step 11: Package the application
    - name: Package application
      run: mvn package -DskipTests

    # Step 12: Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/

    # Step 13: Upload JAR artifact
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: target/*.jar

    # Step 14: SonarQube analysis (optional)
    - name: SonarQube Scan
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn sonar:sonar \
            -Dsonar.projectKey=smart-clinic-backend \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
        else
          echo "SonarQube analysis skipped - SONAR_TOKEN not available"
        fi

    # Step 15: Build status notification
    - name: Build Success Notification
      if: success()
      run: echo "✅ Backend build and tests completed successfully!"

    - name: Build Failure Notification
      if: failure()
      run: echo "❌ Backend build or tests failed!"

  # Job 2: Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Step 1: Run PMD static analysis
    - name: Run PMD Analysis
      run: mvn pmd:check
      continue-on-error: true

    # Step 2: Run SpotBugs analysis
    - name: Run SpotBugs Analysis
      run: mvn spotbugs:check
      continue-on-error: true

    # Step 3: Generate code coverage report
    - name: Generate Code Coverage
      run: mvn jacoco:report

    # Step 4: Upload coverage to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage

  # Job 3: Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t smart-clinic-backend:test .
        docker run --rm smart-clinic-backend:test echo "Docker build test successful"
